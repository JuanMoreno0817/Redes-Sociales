@page "/graph-viewer"
@using redes_Sociales.Data
@using redes_Sociales.Data.Models
@inject IJSRuntime JSRuntime
@inject GraphService GraphService
@implements IDisposable

<div class="graph-container">
    <div id="graph-visualization" class="graph-box"></div>
</div>

@code {
    private Grafo grafo = new();
    private List<Nodo> todosLosNodos = new();
    private List<Arista> todasLasAristas = new();
    private DotNetObjectReference<GraphViewer>? objRef;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            grafo = GraphService.Grafo;
            // Suscripción al evento de cambios
            GraphService.OnGraphChanged += HandleGraphChanged;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error inicializando: {ex.Message}");
        }
        await Task.CompletedTask;
    }

    private async void HandleGraphChanged()
    {
        await InvokeAsync(async () =>
        {
            Console.WriteLine("🔄 Evento recibido: Actualizando gráfico...");
            await InitializeGraph();
            StateHasChanged();
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(100);
            await InitializeGraph();
        }
    }

    private async Task InitializeGraph()
    {
        try
        {
            Grafo grafoActual = GraphService.Grafo;
            var nodes = grafoActual.Nodos.Values.Select(n => new
            {
                id = n.Id,
                label = n.Nombre,
                title = $"{n.Rol} | Intereses: {string.Join(", ", n.Intereses)}",
                group = n.Rol,
                shape = n.Rol == "Profesor" ? "diamond" :
                        n.Rol == "Estudiante" ? "ellipse" : "square",
                color = GetColor(n.Rol)
            }).ToList();

            var edges = grafoActual.Aristas.Select(a => new
            {
                from = a.Origen.Id,
                to = a.Destino.Id,
                label = $"{a.Tipo} ({a.Peso})",
                title = $"Desde: {a.Fecha.ToShortDateString()} | Duración: {a.DuracionMeses} meses",
                color = "#848484"
            }).ToList();

            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("drawGraph", nodes, edges);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al generar gráfico: {ex.Message}");
        }
    }

    private string GetShape(string role) => role switch
    {
        "Profesor" => "diamond",
        "Estudiante" => "ellipse",
        "Investigador" => "square",
        _ => "circle"
    };

    private string GetColor(string role) => role switch
    {
        "Profesor" => "#007bff",
        "Estudiante" => "#FFD700",
        "Investigador" => "#28a745",
        _ => "#ccc"
    };

    public void Dispose()
    {
        objRef?.Dispose();
        GraphService.OnGraphChanged -= HandleGraphChanged;
        GC.SuppressFinalize(this);
    }

    public async Task FiltrarPorInteres(string interes)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(interes))
            {
                await InitializeGraph();
                return;
            }

            // 1. Obtener nodos filtrados
            var nodosFiltrados = GraphService.ObtenerNodosPorComunidad(interes);

            // 2. Obtener TODAS las aristas posibles (aunque conecten nodos no visibles)
            var todasAristas = grafo.Aristas.ToList();

            // 3. Formatear datos
            var nodosFormateados = nodosFiltrados.Select(n => new
            {
                id = n.Id,
                label = n.Nombre,
                title = $"{n.Rol} | Intereses: {string.Join(", ", n.Intereses)}",
                group = n.Rol
            }).ToList();

            var aristasFormateadas = todasAristas.Select(a => new
            {
                from = a.Origen.Id,
                to = a.Destino.Id,
                label = $"{a.Tipo} ({a.Peso})"
            }).ToList();

            Console.WriteLine($"Enviando a JS: {nodosFormateados.Count} nodos, {aristasFormateadas.Count} aristas");

            // 4. Dibujar grafo (mostrará solo nodos visibles pero con todas las aristas)
            await JSRuntime.InvokeVoidAsync(
                "drawGraph",
                nodosFormateados,
                aristasFormateadas,
                interes
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error filtrando por interés: {ex.Message}");
        }
    }
}
